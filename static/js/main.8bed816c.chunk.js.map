{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["PlanetInfo","_ref","planet","React","createElement","className","name","realDiameter","realDistance","composition","orbitalElements","mercurio","a","e","I","L","ω","Ω","texture","size","venus","tierra","marte","jupiter","saturno","urano","neptuno","solveKepler","M","tol","arguments","length","undefined","E","deltaE","Math","abs","sin","cos","calculatePosition","T","M_rad","THREE","degToRad","x_orbital","y_orbital","sqrt","x","y","z","createPlanet","distance","texturePath","orbitalParams","geometry","load","material","map","shininess","position","set","orbitLine","createOrbitLine","points","i","x_ec","y_ec","z_ec","push","orbitGeometry","setFromPoints","orbitMaterial","color","App","selectedPlanet","setSelectedPlanet","useState","planetsArray","setPlanetsArray","cometsArray","setCometsArray","camera","setCamera","useEffect","scene","cam","window","innerWidth","innerHeight","renderer","setSize","document","body","appendChild","domElement","controls","OrbitControls","enableDamping","dampingFactor","enableZoom","ambientLight","add","planetsArrayTemp","Object","keys","forEach","planetKey","planetParams","raycaster","mouse","onMouseMove","event","clientX","clientY","setFromCamera","intersects","intersectObjects","style","cursor","onMouseClick","clickedPlanetName","object","clickedPlanet","addEventListener","animate","requestAnimationFrame","update","render","removeChild","removeEventListener","key","onClick","planetSize","zoomFactor","offsetDistance","direction","subVectors","normalize","lookAt","updateProjectionMatrix","focusOnPlanet","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","StrictMode"],"mappings":"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","file":"static/js/main.8bed816c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport axios from 'axios'; // Para obtener los cometas\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport './App.css';\n\n// Componente para mostrar la información de los planetas y cometas\nconst PlanetInfo = ({ planet }) => {\n  if (!planet) {\n    return <div className=\"planet-info\">Haz clic en un planeta para ver la información</div>;\n  }\n\n  return (\n    <div className=\"planet-info\">\n      <h2>{planet.name}</h2>\n      <p><strong>Diámetro:</strong> {planet.realDiameter} km</p>\n      <p><strong>Distancia al Sol:</strong> {planet.realDistance} millones de km</p>\n      {planet.composition && <p><strong>Composición:</strong> {planet.composition}</p>}\n    </div>\n  );\n};\n\n// Datos reales de planetas\nconst orbitalElements = {\n  mercurio: { a: 0.387, e: 0.205, I: 7.0, L: 252.25, ω: 77.45, Ω: 48.33, texture: 'texturamercurio.jpg', size: 0.3, realDiameter: 4879, realDistance: 57.9, composition: 'Mercurio está compuesto principalmente de metales (70% hierro) y silicatos (30%). Tiene un gran núcleo de hierro.' },\n  venus: { a: 0.723, e: 0.007, I: 3.39, L: 181.98, ω: 131.53, Ω: 76.68, texture: 'texturavenus.jpg', size: 1.0, realDiameter: 12104, realDistance: 108.2, composition: 'Venus tiene un núcleo de hierro, un manto de silicatos y una atmósfera densa de CO2 (96.5%) y nitrógeno (3.5%).' },\n  tierra: { a: 1.000, e: 0.017, I: 0.00, L: 100.46, ω: 102.94, Ω: 0.00, texture: 'texturatierra.jpg', size: 1.25, realDiameter: 12742, realDistance: 149.6, composition: 'La Tierra tiene un núcleo de hierro y níquel, manto de silicatos y una atmósfera de nitrógeno (78%) y oxígeno (21%).' },\n  marte: { a: 1.524, e: 0.093, I: 1.85, L: 355.45, ω: 336.04, Ω: 49.56, texture: 'texturamarte.jpg', size: 0.75, realDiameter: 6779, realDistance: 227.9, composition: 'Marte tiene un núcleo de hierro y níquel, y una superficie basáltica. Su atmósfera es de CO2 (95%).' },\n  jupiter: { a: 5.203, e: 0.048, I: 1.30, L: 34.40, ω: 14.73, Ω: 100.56, texture: 'texturajupiter.jpg', size: 3.0, realDiameter: 139820, realDistance: 778.5, composition: 'Júpiter está compuesto de hidrógeno (90%) y helio (10%). Su interior contiene hidrógeno metálico y un pequeño núcleo rocoso.' },\n  saturno: { a: 9.537, e: 0.056, I: 2.49, L: 49.94, ω: 92.86, Ω: 113.64, texture: 'texturasaturno.jpg', size: 2.5, realDiameter: 116460, realDistance: 1434, composition: 'Saturno está compuesto principalmente de hidrógeno (96%) y helio (3%). Al igual que Júpiter, tiene un pequeño núcleo rocoso.' },\n  urano: { a: 19.191, e: 0.046, I: 0.77, L: 313.23, ω: 170.96, Ω: 74.00, texture: 'texturaurano.jpg', size: 2.0, realDiameter: 50724, realDistance: 2871, composition: 'Urano contiene hidrógeno, helio y \"hielos\" como agua, amoníaco y metano, que le dan su color azul verdoso.' },\n  neptuno: { a: 30.068, e: 0.010, I: 1.77, L: 304.88, ω: 44.97, Ω: 131.79, texture: 'texturaneptuno.jpg', size: 1.75, realDiameter: 49244, realDistance: 4495, composition: 'Neptuno tiene hidrógeno, helio y \"hielos\" como agua, amoníaco y metano. Su color azul profundo se debe al metano.' },\n};\n\n// Función para resolver la ecuación de Kepler\nconst solveKepler = (M, e, tol = 1e-6) => {\n  let E = M;\n  let deltaE = 1;\n  while (Math.abs(deltaE) > tol) {\n    deltaE = (M - (E - e * Math.sin(E))) / (1 - e * Math.cos(E));\n    E = E + deltaE;\n  }\n  return E;\n};\n\n// Función para convertir a coordenadas heliocéntricas\nconst calculatePosition = (a, e, I, ω, Ω, L, T) => {\n  const M = ((L - ω) + 360 * (T / 36525)) % 360;\n  const M_rad = THREE.MathUtils.degToRad(M);\n\n  const E = solveKepler(M_rad, e);\n\n  const x_orbital = a * (Math.cos(E) - e);\n  const y_orbital = a * Math.sqrt(1 - e * e) * Math.sin(E);\n\n  const x_ec = (Math.cos(Ω) * Math.cos(ω) - Math.sin(Ω) * Math.sin(ω) * Math.cos(I)) * x_orbital +\n    (-Math.cos(Ω) * Math.sin(ω) - Math.sin(Ω) * Math.cos(ω) * Math.cos(I)) * y_orbital;\n\n  const y_ec = (Math.sin(Ω) * Math.cos(ω) + Math.cos(Ω) * Math.sin(ω) * Math.cos(I)) * x_orbital +\n    (-Math.sin(Ω) * Math.sin(ω) + Math.cos(Ω) * Math.cos(ω) * Math.cos(I)) * y_orbital;\n\n  const z_ec = (Math.sin(ω) * Math.sin(I)) * x_orbital + (Math.cos(ω) * Math.sin(I)) * y_orbital;\n\n  return { x: x_ec, y: y_ec, z: z_ec };\n};\n\n// Función para crear la órbita elíptica como una línea\nconst createOrbitLine = (a, e, I, ω, Ω, L, distance, T) => {\n  const points = [];\n  for (let i = 0; i <= 360; i++) {\n    const M = (L + i) % 360;\n    const M_rad = THREE.MathUtils.degToRad(M);\n    const E = solveKepler(M_rad, e);\n\n    const x_orbital = a * (Math.cos(E) - e);\n    const y_orbital = a * Math.sqrt(1 - e * e) * Math.sin(E);\n\n    const x_ec = (Math.cos(Ω) * Math.cos(ω) - Math.sin(Ω) * Math.sin(ω) * Math.cos(I)) * x_orbital +\n      (-Math.cos(Ω) * Math.sin(ω) - Math.sin(Ω) * Math.cos(ω) * Math.cos(I)) * y_orbital;\n\n    const y_ec = (Math.sin(Ω) * Math.cos(ω) + Math.cos(Ω) * Math.sin(ω) * Math.cos(I)) * x_orbital +\n      (-Math.sin(Ω) * Math.sin(ω) + Math.cos(Ω) * Math.cos(ω) * Math.cos(I)) * y_orbital;\n\n    const z_ec = (Math.sin(ω) * Math.sin(I)) * x_orbital + (Math.cos(ω) * Math.sin(I)) * y_orbital;\n\n    points.push(new THREE.Vector3(x_ec * distance, y_ec * distance, z_ec * distance));\n  }\n\n  const orbitGeometry = new THREE.BufferGeometry().setFromPoints(points);\n  const orbitMaterial = new THREE.LineBasicMaterial({ color: 0xffffff });\n  const orbitLine = new THREE.Line(orbitGeometry, orbitMaterial);\n\n  return orbitLine;\n};\n\n// Función para crear planetas con texturas y sus posiciones keplerianas y su órbita\nconst createPlanet = (name, size, distance, texturePath, orbitalParams, T) => {\n  const geometry = new THREE.SphereGeometry(size * 2.5, 32, 32);\n  const textureLoader = new THREE.TextureLoader();\n\n  // Cargamos la textura de los planetas desde el directorio público\n  const texture = textureLoader.load(`${process.env.PUBLIC_URL}/${texturePath}`);\n\n  const material = new THREE.MeshPhongMaterial({ map: texture, shininess: 100 });\n  const planet = new THREE.Mesh(geometry, material);\n\n  const position = calculatePosition(\n    orbitalParams.a,\n    orbitalParams.e,\n    THREE.MathUtils.degToRad(orbitalParams.I),\n    THREE.MathUtils.degToRad(orbitalParams.ω),\n    THREE.MathUtils.degToRad(orbitalParams.Ω),\n    orbitalParams.L,\n    T\n  );\n\n  planet.position.set(position.x * distance, position.y * distance, position.z * distance);\n  planet.name = name;\n  planet.size = size;\n  planet.distance = distance;\n\n  const orbitLine = createOrbitLine(\n    orbitalParams.a,\n    orbitalParams.e,\n    THREE.MathUtils.degToRad(orbitalParams.I),\n    THREE.MathUtils.degToRad(orbitalParams.ω),\n    THREE.MathUtils.degToRad(orbitalParams.Ω),\n    orbitalParams.L,\n    distance,\n    T\n  );\n\n  return { planet, orbitLine };\n};\n\n// Función para crear cometas con sus respectivas propiedades\nconst createComet = (name, orbitalParams, composition, size = 0.3, color = 0xffffff) => {\n  const geometry = new THREE.SphereGeometry(size, 32, 32);\n  const material = new THREE.MeshBasicMaterial({ color });\n  const comet = new THREE.Mesh(geometry, material);\n\n  const position = calculatePosition(\n    parseFloat(orbitalParams.q_au_1),\n    parseFloat(orbitalParams.e),\n    THREE.MathUtils.degToRad(parseFloat(orbitalParams.i_deg)),\n    THREE.MathUtils.degToRad(parseFloat(orbitalParams.w_deg)),\n    THREE.MathUtils.degToRad(parseFloat(orbitalParams.node_deg)),\n    parseFloat(orbitalParams.tp_tdb),\n    2451545.0\n  );\n\n  comet.position.set(position.x * 100, position.y * 100, position.z * 100);\n  comet.name = name;\n  comet.composition = composition;\n\n  return comet;\n};\n\nconst App = () => {\n  const [selectedPlanet, setSelectedPlanet] = useState(null);\n  const [planetsArray, setPlanetsArray] = useState([]);\n  const [cometsArray, setCometsArray] = useState([]);\n  const [camera, setCamera] = useState(null);\n\n  useEffect(() => {\n    const scene = new THREE.Scene();\n  \n    const cam = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 5000);\n    cam.position.z = 300;\n    setCamera(cam);\n  \n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n  \n    const controls = new OrbitControls(cam, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controls.enableZoom = true;\n  \n    const ambientLight = new THREE.AmbientLight(0xffffff, 4);\n    scene.add(ambientLight);\n  \n    const planetsArrayTemp = [];\n  \n    // Código para cargar texturas y crear planetas\n    Object.keys(orbitalElements).forEach((planetKey) => {\n      const planetParams = orbitalElements[planetKey];\n      const { planet, orbitLine } = createPlanet(\n        planetKey,\n        planetParams.size,\n        50,\n        planetParams.texture,\n        planetParams,\n        2451545.0\n      );\n  \n      scene.add(planet);\n      scene.add(orbitLine);\n      planetsArrayTemp.push(planet);\n    });\n  \n    setPlanetsArray(planetsArrayTemp);\n  \n    const raycaster = new THREE.Raycaster();\n    const mouse = new THREE.Vector2();\n  \n    const onMouseMove = (event) => {\n      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n      raycaster.setFromCamera(mouse, cam);\n      const intersects = raycaster.intersectObjects([...planetsArrayTemp, ...cometsArray]);\n      document.body.style.cursor = intersects.length > 0 ? 'pointer' : 'default';\n    };\n  \n    const onMouseClick = (event) => {\n      raycaster.setFromCamera(mouse, cam);\n      const intersects = raycaster.intersectObjects(planetsArrayTemp);\n      if (intersects.length > 0) {\n        const clickedPlanetName = intersects[0].object.name;\n        const clickedPlanet = orbitalElements[clickedPlanetName];\n        if (clickedPlanet) {\n          setSelectedPlanet({ ...clickedPlanet, name: clickedPlanetName });\n        }\n      }\n    };\n  \n    window.addEventListener('mousemove', onMouseMove);\n    window.addEventListener('click', onMouseClick);\n  \n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, cam);\n    };\n  \n    animate();\n  \n    // Cleanup function for removing event listeners and DOM element\n    return () => {\n      document.body.removeChild(renderer.domElement);\n      window.removeEventListener('mousemove', onMouseMove);\n      window.removeEventListener('click', onMouseClick);\n    };\n  }, [cometsArray]); // Asegúrate de incluir cometsArray aquí\n  \n\n  const focusOnPlanet = (planet) => {\n    if (camera && planet) {\n      const planetSize = planet.size;\n      const zoomFactor = 6;\n\n      const offsetDistance = planet.name === 'jupiter'\n        ? planetSize * zoomFactor - 20\n        : planetSize * zoomFactor - 10;\n\n      const direction = new THREE.Vector3()\n        .subVectors(new THREE.Vector3(0, 0, 0), planet.position)\n        .normalize();\n\n      camera.position.set(\n        planet.position.x + direction.x * offsetDistance,\n        planet.position.y + direction.y * offsetDistance,\n        planet.position.z + direction.z * offsetDistance\n      );\n\n      camera.lookAt(planet.position);\n      camera.updateProjectionMatrix();\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"planet-menu\">\n        <h2>Planetas</h2>\n        <ul>\n          {planetsArray.map((planet) => (\n            <li key={planet.name} onClick={() => focusOnPlanet(planet)}>\n              {planet.name}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <PlanetInfo planet={selectedPlanet} />\n    </div>\n  );\n};\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}